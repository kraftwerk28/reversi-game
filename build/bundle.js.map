{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/utils.js","../../src/Disc.svelte","../../src/GameResults.svelte","../../node_modules/svelte/store/index.mjs","../../src/Marker.svelte","../../src/Field.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { linear } from 'svelte/easing';\n\n// Disc flip animation\nexport const swapTrn = (_, { duration = 300 }) => ({\n  duration,\n  easing: linear,\n  css: (t, u) => {\n    return `\n      transform: rotateX(${t * 0.5}turn)\n                 scale(${(t >= 0.5 ? u : t) * 2 + 1});\n      visibility: ${t >= 0.5 ? 'visible' : 'hidden'};\n    `;\n  },\n});\n\nexport const i2xy = (i) => [i % 8, (i / 8) | 0];\nexport const xy2i = (x, y) => y * 8 + x;\nconst directions = [\n  [1, 0], [1, 1], [0, 1], [-1, 1],\n  [-1, 0], [-1, -1], [0, -1], [1, -1],\n];\n\nexport function getPossibleMoves(gameState) {\n  const { move, board, pass } = gameState;\n  const allowedMoves = new Map();\n  let otherColor = move === STATE.BLACK ? STATE.WHITE : STATE.BLACK;\n  board\n    .map((cl, idx) => [cl, idx])\n    .filter(([cl]) => cl === move)\n    .forEach(([_, i]) => {\n      const [x, y] = i2xy(i);\n\n      directions.forEach(([dx, dy]) => {\n        let rowToFlip = [];\n        for (\n          let _x = x + dx, _y = y + dy;\n          _x >= 0 && _x < 8 && _y >= 0 && y < 8;\n          _x += dx, _y += dy\n        ) {\n          const idx = xy2i(_x, _y);\n          const c = board[idx];\n          if (c === otherColor) {\n            rowToFlip.push(idx);\n          } else if (c === STATE.NONE) {\n            if (rowToFlip.length) {\n              allowedMoves.set(\n                idx,\n                rowToFlip.concat(allowedMoves.get(idx) || [])\n              );\n            }\n            break;\n          } else {\n            break;\n          }\n        }\n      });\n    });\n  return allowedMoves;\n}\n\nexport function initGame() {\n  const f = Array(64).fill(STATE.NONE);\n  f[xy2i(3, 3)] = f[xy2i(4, 4)] = STATE.WHITE;\n  f[xy2i(4, 3)] = f[xy2i(3, 4)] = STATE.BLACK;\n  return { move: STATE.BLACK, board: f, pass: false };\n}\n\nexport const STATE = {\n  NONE: 0, BLACK: 1, WHITE: 2,\n  BLACK_WON: 3, WHITE_WON: 4, TIE: 5,\n};\n\nexport function countDiscs(board) {\n  let black = 0;\n  let white = 0;\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === STATE.BLACK) black++;\n    if (board[i] === STATE.WHITE) white++;\n  }\n  return { black, white };\n}\n\nexport function choseWinner(board) {\n  const { black, white } = countDiscs(board);\n  let result = '';\n  if (black > white) {\n    result = 'Mr Black won';\n  } else if (black < white) {\n    result = 'Mr White won';\n  } else {\n    result = 'Tie, friendship won';\n  }\n  alert(`Black: ${black}\\nWhite: ${white}\\n${result}`);\n}\n","<script>\n  import { swapTrn, STATE } from './utils';\n\n  export let color;\n</script>\n\n<style>\n  .root {\n    display: block;\n    position: relative;\n    width: 3em;\n    height: 3em;\n    background: green;\n    cursor: pointer;\n  }\n  .disc {\n    width: 2em;\n    height: 2em;\n    position: absolute;\n    border-radius: 1em;\n    top: 0.5em;\n    left: 0.5em;\n    box-sizing: border-box;\n  }\n  .w {\n    background: white;\n  }\n  .b {\n    background: black;\n  }\n</style>\n\n<div class=\"root\" on:click>\n  {#if color === STATE.BLACK}\n    <div class=\"disc b\" transition:swapTrn />\n  {/if}\n\n  {#if color === STATE.WHITE}\n    <div class=\"disc w\" transition:swapTrn />\n  {/if}\n</div>\n\n","<script>\n  import { STATE } from './utils';\n  export let gameState;\n  export let onGameRestart;\n  $: isGameEnded = [STATE.TIE, STATE.BLACK_WON, STATE.WHITE_WON].includes(\n    gameState.move\n  );\n  let winText;\n  $: {\n    if (gameState.move === STATE.TIE) {\n      winText = '🤷Tie!';\n    } else {\n      const face = gameState.move === STATE.WHITE_WON ? '🌝' : '🌚';\n      winText = `${face} won!`;\n    }\n  }\n</script>\n\n<style>\n  .root {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .root h1 {\n    font-size: 3em;\n    color: white;\n    text-shadow: black 0px 0px 5px;\n  }\n</style>\n\n{#if isGameEnded}\n  <div class=\"root\" on:click={onGameRestart}>\n    <h1>{winText}</h1>\n  </div>\n{/if}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script context=\"module\">\n  import { writable } from 'svelte/store';\n  const markerState = writable({ visible: false });\n\n  export function onMouseMove(evt, fieldBounds) {\n    const { left, top, width, height } = fieldBounds;\n    const { clientX, clientY } = evt;\n    const [x, y] = [\n      (((clientX - left) / width) * 8) | 0,\n      (((clientY - top) / height) * 8) | 0,\n    ];\n    markerState.update((s) => {\n      if (x === s.x && y === s.y && s.visible) {\n        return s;\n      }\n      return { ...s, x, y, visible: true };\n    });\n  }\n\n  export function onMouseLeave() {\n    markerState.update((s) => ({ ...s, visible: false }));\n  }\n</script>\n\n<script>\n  import { xy2i } from './utils';\n\n  export let possibleMoves;\n  export let fieldBounds;\n\n  let markerStyle = '';\n  $: allow = possibleMoves.has(xy2i($markerState.x, $markerState.y));\n\n  $: {\n    if (fieldBounds) {\n      const { x, y } = $markerState;\n      markerStyle = `\n        left: ${(x / 8) * (fieldBounds.width - 14) + x * 2}px;\n        top: ${(y / 8) * (fieldBounds.height - 14) + y * 2}px;\n      `;\n    }\n  }\n</script>\n\n<style>\n  .marker {\n    width: 3em;\n    height: 3em;\n    position: absolute;\n    box-sizing: border-box;\n    pointer-events: none;\n    opacity: 0;\n    transition: left 0.2s, top 0.2s, border-color 0.2s, opacity 0.2s;\n    border: 2px solid tomato;\n  }\n  .visible {\n    opacity: 1;\n  }\n  .allow {\n    border: 2px solid lime;\n  }\n</style>\n\n<div\n  class=\"marker\"\n  class:allow\n  class:visible={$markerState.visible}\n  style={markerStyle} />\n","<script>\n  import Disc from './Disc.svelte';\n  import GameResults from './GameResults.svelte';\n  import Marker, { onMouseMove, onMouseLeave } from './Marker.svelte';\n  import { initGame, getPossibleMoves, choseWinner, STATE } from './utils';\n\n  let gameState = initGame();\n  $: possibleMoves = getPossibleMoves(gameState);\n\n  function switchMove() {\n    gameState.move = gameState.move === STATE.BLACK ? STATE.WHITE : STATE.BLACK;\n  }\n\n  function setDisc(i) {\n    const rowToFlip = possibleMoves.get(i);\n    if (!rowToFlip) return;\n    gameState.board[i] = gameState.move;\n    for (const i of rowToFlip) {\n      gameState.board[i] = gameState.move;\n    }\n    gameState.board = gameState.board.slice();\n    switchMove();\n    possibleMoves = getPossibleMoves(gameState);\n    checkWinner();\n  }\n\n  function checkWinner() {\n    if (gameState.board.every((c) => c !== STATE.NONE)) {\n      // Board is full\n      const nBlack = gameState.board.reduce(\n        (acc, c) => acc + (c === STATE.BLACK ? 1 : 0),\n        0\n      );\n      if (nBlack > 32) {\n        gameState.move = STATE.BLACK_WON;\n      } else {\n        gameState.move = STATE.WHITE_WON;\n      }\n      return;\n    }\n\n    if (possibleMoves.size === 0) {\n      if (gameState.pass) {\n        gameState.move = STATE.TIE;\n      } else {\n        switchMove();\n        gameState.pass = true;\n      }\n    }\n  }\n\n  function onGameRestart() {\n    gameState = initGame();\n  }\n\n  let fieldNode;\n  let fieldBounds;\n  function setBounds() {\n    fieldBounds = fieldNode?.getBoundingClientRect();\n  }\n\n  $: setBounds(), fieldNode;\n  $: iswhite = gameState.move === STATE.WHITE;\n  $: remainingDiscs = 64 - gameState.board.filter((c) => c > 0).length;\n  $: isGameEnded = [STATE.TIE, STATE.BLACK_WON, STATE.WHITE_WON].includes(\n    gameState.move\n  );\n</script>\n\n<style>\n  .field-container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  .field-root {\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(8, auto);\n    justify-content: center;\n    grid-gap: 2px;\n    transition: filter 2s;\n  }\n  .game-status span {\n    transition: transform 0.2s;\n    font-size: 3em;\n    display: inline-block;\n  }\n  .iswhite {\n    transform: scaleX(-1);\n  }\n  .blurred {\n    filter: blur(8px);\n  }\n</style>\n\n<svelte:window on:resize={setBounds} />\n\n<div class=\"field-container\">\n  <div class=\"game-status\">\n    <span>&#x1F31A</span>\n    <span class:iswhite>&#x1F448</span>\n    <span>&#x1F31D</span>\n    <span>&nbsp;</span>\n    <span>&#x26AA</span>\n    <span>x{remainingDiscs}</span>\n  </div>\n  <div\n    class=\"field-root\"\n    class:blurred={isGameEnded}\n    bind:this={fieldNode}\n    on:mousemove={(e) => onMouseMove(e, fieldBounds)}\n    on:mouseleave={onMouseLeave}>\n    {#each gameState.board as item, i}\n      <Disc on:click={() => setDisc(i)} color={item} />\n    {/each}\n    <Marker {fieldBounds} {possibleMoves} />\n  </div>\n  <GameResults {gameState} {onGameRestart} />\n</div>\n","import App from './App.svelte';\n\nvar app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","identity","x","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","not_equal","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","toggle_class","toggle","classList","active_docs","current_component","active","create_rule","duration","delay","ease","uid","step","keyframes","p","t","rule","str","hash","i","length","charCodeAt","doc","ownerDocument","add","stylesheet","__svelte_stylesheet","head","sheet","current_rules","__svelte_rules","insertRule","cssRules","animation","style","delete_rule","previous","split","next","filter","anim","indexOf","deleted","join","deleteRule","clear","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","flush","update","pop","has","fragment","before_update","dirty","ctx","after_update","promise","dispatch","direction","kind","dispatchEvent","type","detail","e","createEvent","initCustomEvent","custom_event","outroing","outros","group_outros","r","check_outros","transition_in","block","local","transition_out","o","d","null_transition","create_bidirectional_transition","params","intro","config","running_program","pending_program","animation_name","clear_animation","init","program","Math","abs","start","end","group","go","easing","tick","css","fulfill","loop","[object Object]","then","create_component","mount_component","on_mount","m","new_on_destroy","map","destroy_component","detaching","make_dirty","fill","instance","create_fragment","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","SvelteComponent","this","$destroy","index","splice","$$props","obj","$$set","keys","swapTrn","_","linear","u","xy2i","y","directions","getPossibleMoves","gameState","move","board","pass","allowedMoves","otherColor","STATE","BLACK","WHITE","cl","idx","i2xy","dx","dy","rowToFlip","_x","_y","NONE","set","concat","get","initGame","BLACK_WON","WHITE_WON","TIE","color","slice","winText","onGameRestart","isGameEnded","includes","face","subscriber_queue","visible","markerState","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","writable","onMouseLeave","possibleMoves","fieldBounds","markerStyle","allow","$markerState","width","height","iterations","fieldNode","switchMove","setDisc","every","nBlack","reduce","acc","checkWinner","setBounds","getBoundingClientRect","iswhite","remainingDiscs","evt","left","top","clientX","clientY","onMouseMove","body"],"mappings":"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"}